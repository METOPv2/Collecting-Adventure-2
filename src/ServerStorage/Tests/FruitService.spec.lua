return function()
	local FruitService = require(game.ServerStorage.Source.Services.FruitService)
	local TreeService = require(game.ServerStorage.Source.Services.TreeService)

	describe("CreateFruitModel", function()
		it("it should return new fruit model", function()
			local fruit: Model = FruitService.CreateFruitModel("Apple")
			expect(fruit).to.be.ok()
			expect(typeof(fruit)).to.equal("Instance")
			expect(fruit:IsA("Model")).to.equal(true)
			expect(fruit.Name).to.equal("Apple")
		end)
	end)

	describe("GetFruitSpawns", function()
		it("should return a table with fruit spawns from tree", function()
			local tree: Model = TreeService.CreateTree("Apple")
			local fruitSpawns = FruitService.GetFruitSpawns(tree)
			expect(fruitSpawns).to.be.ok()
			expect(typeof(fruitSpawns)).to.equal("table")
			expect(typeof(fruitSpawns[1])).to.equal("Instance")
			expect(fruitSpawns[1]:IsA("Part")).to.equal(true)
		end)
	end)

	describe("GetFruitSpawn", function()
		it("should return a random fruit spawn from a tree", function()
			local tree: Model = TreeService.CreateTree("Apple")
			local fruitSpawn: Part = FruitService.GetFruitSpawn(tree)
			expect(fruitSpawn).to.be.ok()
			expect(typeof(fruitSpawn)).to.equal("Instance")
			expect(fruitSpawn:IsA("Part")).to.equal(true)
		end)
	end)

	describe("PositionFruitModelOnFruitSpawn", function()
		it("should position fruit model under a fruit spawn", function()
			local tree: Model = TreeService.CreateTree("Apple")
			local fruitSpawn: Part = FruitService.GetFruitSpawn(tree)
			local fruit: Model = FruitService.CreateFruitModel("Apple")
			expect(function()
				FruitService.PositionFruitModelOnFruitSpawn(fruit, fruitSpawn)
			end).to.never.throw()
		end)
	end)

	describe("InitializePromptOnFruit", function()
		it("should initialize prompt on fruit", function()
			local fruit: Model = FruitService.CreateFruitModel("Apple")
			expect(function()
				FruitService.InitializePromptOnFruit(fruit)
			end).to.never.throw()
		end)
	end)
end
